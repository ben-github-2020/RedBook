#!/bin/bash

#COLORS
RESTORE='\033[0m'

LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'

UL='\033[4m'    # underline

command_nmapcustom(){
rm -f nmapcustom
touch nmapcustom
chmod +x nmapcustom
echo ""
#cible
read -p "[*] Indiquer votre cible : " target
echo "nmap $target" | tr -d "\n" >> nmapcustom
#timing and perf
echo -e "\n0 = Paranoid	Intrusion Detection System evasion"
echo -e "1 = Sneaky	Intrusion Detection System evasion"
echo -e "2 = Polite	slows down the scan to use less bandwidth and use less target machine resources"
echo -e "3 = Normal	which is default speed"
echo -e "4 = Aggressive	speeds scans; assumes you are on a reasonably fast and reliable network"
echo -e "5 = Insane	speeds scan; assumes you are on an extraordinarily fast network"
read -p "[*] Timing & Performance ? (0/1/2/3/4/5 - default=3) : " scantimingandperf
default_scantimingandperf="3"
scantimingandperf="${scantimingandperf:-${default_scantimingandperf}}"
while [[ TRUE ]]; do
	if [[ $scantimingandperf == 0 ]]; then
		echo " -T0" | tr -d "\n" >> nmapcustom
		break
	elif [[ $scantimingandperf == 1 ]]; then
		echo " -T1" | tr -d "\n" >> nmapcustom
		break
	elif [[ $scantimingandperf == 2 ]]; then
		echo " -T2" | tr -d "\n" >> nmapcustom
		break
	elif [[ $scantimingandperf == 3 ]]; then
		echo " -T3" | tr -d "\n" >> nmapcustom
		break
	elif [[ $scantimingandperf == 4 ]]; then
		echo " -T4" | tr -d "\n" >> nmapcustom
		break
	elif [[ $scantimingandperf == 5 ]]; then
		echo " -T5" | tr -d "\n" >> nmapcustom
		break
	else
		echo -e "${LYELLOW}/!\ Option invalide !${RESTORE}"
		read -p "[*] Timing & Performance ? (0/1/2/3/4/5 - default=3) : " scantimingandperf
		default_scantimingandperfe="3"
		scantimingandperf="${scantimingandperf:-${default_scantimingandperf}}"
	fi
done
#scan technique
read -p "[*] Scan technique ? (syn/ack/udp - default=syn) : " scantechnique
default_scantechnique="syn"
scantechnique="${scantechnique:-${default_scantechnique}}"
while [[ TRUE ]]; do
	if [[ $scantechnique == syn ]]; then
		echo " -sS" | tr -d "\n" >> nmapcustom
		break
	elif [[ $scantechnique == ack ]]; then
		echo " -sA" | tr -d "\n" >> nmapcustom
		break
	elif [[ $scantechnique == udp ]]; then
		echo " -sU" | tr -d "\n" >> nmapcustom
		break
	else
		echo -e "${LYELLOW}/!\ Option invalide !${RESTORE}"
		read -p "[*] Scan technique ? (syn/ack/udp - default=syn) : " scantechnique
		default_scantechnique="syn"
		scantechnique="${scantechnique:-${default_scantechnique}}"
	fi
done
#ports
read -p "[*] Specific Port ? (yes/no - default=no) : " port
default_port="no"
port="${port:-${default_port}}"
while [[ TRUE ]]; do
	if [[ $port == yes || $port == y ]]; then
		read -p "[*] Starting Port : " startport
		read -p "[*] Ending Port : " endport
		while [[ $endport < $startport ]]; do
			echo -e "${LYELLOW} /!\ Le port de fin est inferieur au port de départ ${RESTORE}"
			read -p "[*] Ending Port : " endport
		done
		echo " -p $startport-$endport" | tr -d "\n" >> nmapcustom
		break
	elif [[ $port == no || $port == n ]]; then 
		break
	else
		echo -e "\n${LYELLOW}/!\ Option invalide !${RESTORE}"
		read -p "[*] Specific Port ? (yes/no - default=no) : " port
		default_port="no"
		port="${port:-${default_port}}"
	fi
done
#scan services
read -p "[*] Scan services ? (yes/no - default=no) : " scanservice
default_scanservice="no"
scanservice="${scanservice:-${default_scanservice}}"
while [[ TRUE ]]; do
	if [[ $scanservice == yes || $scanservice == y ]]; then
		echo " -sV -version-all" | tr -d "\n" >> nmapcustom
		break
	elif [[ $scanservice == no || $scanservice == n ]]; then 
		break
	else
		echo -e "${LYELLOW}/!\ Option invalide !${RESTORE}"
		read -p "[*] Scan services ? (yes/no - default=no) : " scanservice
		default_scanservice="no"
		scanservice="${scanservice:-${default_scanservice}}"
	fi
done
#scan OS
read -p "[*] Scan operating system (yes/no - default=no) : " scanos
default_scanos="no"
scanos="${scanos:-${default_scanos}}"
while [[ TRUE ]]; do
	if [[ $scanos == yes || $scanos == y ]]; then
		echo " -O" | tr -d "\n" >> nmapcustom
		break
	elif [[ $scanos == no || $scanos == n ]]; then 
		break
	else
		echo -e "${LYELLOW}/!\ Option invalide !${RESTORE}"
		read -p "[*] Scan operating system ? (yes/no - default=no) : " scanos
		default_scanos="no"
		scanos="${scanos:-${default_scanos}}"
	fi
done
#scan script NSE
read -p "[*] Use default scripts NSE (yes/no - default= no) " scannse
default_scannse="no"
scannse="${scannse:-${default_scannse}}"
while [[ TRUE ]]; do
	if [[ $scannse == yes || $scannse == y ]]; then
		echo " -sC" | tr -d "\n" >> nmapcustom
		break
	elif [[ $scannse == no || $scannse == n ]]; then 
		break
	else
		echo -e "${LYELLOW}/!\ Option invalide !${RESTORE}"
		read -p "[*] Use default scripts NSE ? (yes/no - default=no) : " scannse
		default_scannse="no"
		scannse="${scannse:-${default_scannse}}"
	fi
done
#output
filename="Nmap_"$target"_"$(date +%F)"_"$(date +%T)
echo " -oX $filename" | tr -d "\n" >> nmapcustom
#nmap
echo -e "\n"
./nmapcustom
xsltproc $filename -o $filename
rm -f nmapcustom
echo -e "\n${LRED}[*]${RESTORE} Le resultat a été exporté dans votre projet en cours ($redbookpath/$projet)\n\n"
read -n 1 -s -r -p "Appuyer sur une touche pour retourner au menu principal "
menu_main
}

menu_nikto(){
clear
echo -e "-----${LRED} NIKTO ${RESTORE}-----"
echo -e "${LRED}(1)${RESTORE}Installer Nikto"
echo -e "${LRED}(2)${RESTORE}Désinstaller Nikto"
echo -e "${LRED}(3)${RESTORE}Modifier les parametres proxy"
echo -e "${LRED}(4)${RESTORE}Renitialiser les parametres proxy\n"
echo -e "${LRED}(5)${RESTORE}Simple scan" 
echo -e "${LRED}(6)${RESTORE}Custom scan" 
echo -e "\n${LRED}(0)${RESTORE} Menu principal"
echo -e "${LRED}(Q)${RESTORE} Quitter\n\n"
read -p "Choisisssez une option:" option

if [[ $option == 1 ]]; then
	echo -e "Installation de Nikto en cours ..."
	dpkg --configure -a
	sudo apt-get install nikto 2> /dev/nul
	echo -e "\n\n${LRED}[*]${RESTORE} Nikto a été installé correctement"
	echo -e "Retour au menu..."
	sleep 5
	menu_nikto
elif [[ $option == 2 ]]; then
	apt-get remove nikto -y
	echo -e "\n${LRED}[*]${RESTORE} Nikto a bien été désinstallé"
	echo -e "Retour au menu..."
	sleep 5
	menu_nikto	
elif [[ $option == 3 ]]; then
    read -p "[*] PROXY HOST (Url ou l’IP du serveur proxy) ? : " PHOST
	read -p "[*] PROXY PORT (Port du proxy) ? : " PPORT
    read -p "[*] PROXY USER (Utilisateur si besoin) ? : " PUSER
	read -p "[*] PROXY PASS (Mot de passe de l’utilisateur si besoin) ? : " PPASS
    sed -i 's/^#*PROXYHOST=.*/PROXYHOST='"${PHOST}"'/' /etc/nikto.conf	
	sed -i 's/^#*PROXYPORT=.*/PROXYPORT='"${PPORT}"'/' /etc/nikto.conf	
	sed -i 's/^#*PROXYUSER=.*/PROXYUSER='"${PUSER}"'/' /etc/nikto.conf	
    sed -i 's/^#*PROXYPASS=.*/PROXYPASS='"${PPASS}"'/' /etc/nikto.conf	
	echo -e "\n${LRED}[*]${RESTORE} Les paramètres proxy ont été mis à jour"
	echo -e "Retour au menu..."
    sleep 5
	menu_nikto
elif [[ $option == 4 ]]; then
	sed -i 's/^#PROXYHOST=./#PROXYHOST='"127.0.0.1"'/' /etc/nikto.conf
	sed -i 's/^#PROXYPORT=./#PROXYPORT='"8080"'/' /etc/nikto.conf
	sed -i 's/^#PROXYUSER=./#PROXYUSER='"proxyuserid"'/' /etc/nikto.conf
	sed -i 's/^#PROXYPASS=./#PROXYPASS='"proxypassword"'/' /etc/nikto.conf
	echo -e "\n${LRED}[*]${RESTORE} Les paramètres proxy ont été réinitialisé"
	echo -e "Retour au menu..."
	sleep 5
	menu_nikto
elif [[ $option == 5 ]]; then
    read -p "[*]  Target url ? :" target 
	filename="Nikto_"$target"_"$(date +%F)"_"$(date +%T)
    nikto -h $target -F htm -o $filename
	echo -e "\n${LRED}[*]${RESTORE} Le resultat a été exporté dans votre projet en cours ($redbookpath/$projet)\n\n"
	read -n 1 -s -r -p " Appuyer sur une touche pour retourner au menu principal"
	menu_main
elif [[ $option == 6 ]]; then
	command_niktocustom
elif [[ $option == 0 ]]; then
	menu_main
elif [[ $option == Q || $option == q ]]; then
	clear
	exit 1
else
	echo -e "\n${LYELLOW}/!\ Option invalide !${RESTORE}"
	sleep 2
	menu_nikto
fi
}

menu_nmap(){
clear
echo -e "-----${LRED} NMAP MENU ${RESTORE}-----"
echo -e "${LRED}(1)${RESTORE} Nmap Classique"
echo -e "${LRED}(2)${RESTORE} Nmap Full"
echo -e "${LRED}(3)${RESTORE} Nmap IDS Evasion"
echo -e "${LRED}(4)${RESTORE} Nmap Custom"
echo -e "\n${LRED}(0)${RESTORE} Menu principal"
echo -e "${LRED}(Q)${RESTORE} Quitter\n\n"
read -p $"Choisisssez une option : " option
if [[ $option == 1 ]]; then
	read -p $"Indiquer votre cible : " target
	echo -e "\n"
	filename="Nmap_"$target"_"$(date +%F)"_"$(date +%T)
	nmap -v $target -oX $filename
	xsltproc $filename -o $filename
	echo -e "\n${LRED}[*]${RESTORE} Le resultat a été exporté dans votre projet en cours ($redbookpath/$projet)\n\n"
	read -n 1 -s -r -p "Appuyer sur une touche pour retourner au menu principal "
	menu_main
elif [[ $option == 2 ]]; then
	read -p $"Indiquer votre cible : " target
	echo -e "\n"
	filename="Nmap_"$target"_"$(date +%F)"_"$(date +%T)
	nmap $target -T4 -A -oX $filename
	xsltproc $filename -o $filename
	echo -e "\n${LRED}[*]${RESTORE} Le resultat a été exporté dans votre projet en cours ($redbookpath/$projet)\n\n"
	read -n 1 -s -r -p "Appuyer sur une touche pour retourner au menu principal "
	menu_main
elif [[ $option == 3 ]]; then
	read -p $"Indiquer votre cible : " target
	echo -e "\n"
	filename="Nmap_"$target"_"$(date +%F)"_"$(date +%T)
	nmap $target -v -f -T0 -n -Pn --data-length 200 -oX $filename
	xsltproc $filename -o $filename
	echo -e "\n${LRED}[*]${RESTORE} Le resultat a été exporté dans votre projet en cours ($redbookpath/$projet)\n\n"
	read -n 1 -s -r -p "Appuyer sur une touche pour retourner au menu principal "
	menu_main
elif [[ $option == 4 ]]; then
	command_nmapcustom
elif [[ $option == 0 ]]; then
	menu_main
elif [[ $option == Q || $option == q ]]; then
	clear
	exit 1
else
	echo -e "\n${LYELLOW}/!\ Option invalide !${RESTORE}"
	sleep 2
	menu_nmap
fi
}

menu_main(){
clear
banner
echo -e "Vous travaillez actuellement sur le projet ${LBLUE}$name_projet${RESTORE}\n"
echo -e "Actions possibles dans le ${LRED}RedBook${RESTORE}\n"
echo -e "${LRED}(1)${RESTORE} Nmap"
echo -e "${LRED}(2)${RESTORE} SQLmap"
echo -e "${LRED}(3)${RESTORE} DNSrecon"
echo -e "${LRED}(4)${RESTORE} Nikto"
echo -e "\n${LRED}(Q)${RESTORE} Quitter\n\n"
read -p $"Choisisssez une option:" option
if [[ $option == 1 ]]; then
	menu_nmap
elif [[ $option == 2 ]]; then
	clear
	sqlmap --wizard
	echo ""
	read -n 1 -s -r -p "Appuyer sur une touche pour retourner au menu principal "
	menu_main
elif [[ $option == 3 ]]; then
	read -p "[*] Indiquer votre cible : " target
	clear
	filename="DNSenum_"$target"_"$(date +%F)"_"$(date +%T)
	dnsrecon -d $target --csv "$redbookpath/$projet/$filename.csv"
	read -n 1 -s -r -p "Appuyer sur une touche pour retourner au menu principal "
	menu_main
elif [[ $option == 4 ]]; then
	menu_nikto
elif [[ $option == Q || $option == q ]]; then
	clear
	exit 1
else
	echo -e "\n${LYELLOW}/!\ Option invalide !${RESTORE}"
	sleep 2
	menu_main
fi
}

menu_start(){
#check root
if [[ "$(id -u)" != 0 ]]; then
	echo -e "${LYELLOW}/!\ Ce programme doit être lancé en root !${RESTORE}\n"
	read -n 1 -s -r -p "Appuyer sur une touche pour quitter "
	clear
	exit 1
fi
#timezone Paris
timedatectl set-timezone Europe/Paris
#path main dossier
redbookpath=$(find / -name "RedBook" 2>/dev/null)
cd $redbookpath
#creation dossier principal
if [[ ! -d Projets ]]; then 
	mkdir Projets
fi
#choix options
echo -e "${LRED}(1)${RESTORE} Créer un nouveau projet"
echo -e "${LRED}(2)${RESTORE} Reprendre un projet en cours"
echo -e "\n${LRED}(Q)${RESTORE} Quitter\n\n"
read -p "Choisissez une option : " option
if [[ $option == 1 ]]; then
	read -p "Nom du nouveau projet : " name_projet
	projet="Projets/"$name_projet
	while [[ -d $projet ]]; do
		echo -e "${LYELLOW}/!\ Le projet ${LBLUE}$name_projet${LYELLOW} existe déjà${RESTORE}\n"
		read -p $"Nom du nouveau projet : " name_projet
		projet="Projets/"$name_projet
	done
	mkdir $projet
	cd $projet
	menu_main
elif [[ $option == 2 ]]; then
	echo -e "\n${UL}Voici les projets en cours${RESTORE}\n"
	ls Projets
	echo ""
	read -p $"Nom du projet à continuer  : " name_projet
	projet="Projets/"$name_projet
	while [[ ! -d $projet ]]; do
		echo -e "${LYELLOW}/!\ Le projet ${LBLUE}$name_projet${LYELLOW} n'existe pas${RESTORE}\n"
		read -p $"Nom du projet à continuer : " name_projet
		projet="Projets/"$name_projet
	done
	cd $projet
	menu_main
elif [[ $option == Q || $option == q ]]; then
	clear
	exit 1
else
	echo -e "\n${LYELLOW}/!\ Option invalide !${RESTORE}"
	sleep 2
	clear
	banner
	menu_start
fi
}

banner(){
echo -e "${LRED}
\t    ____________________   ___________________    
\t.-/|                    \ /                   |\-.
\t||||                     |                    ||||
\t||||  ____          _ ____              _     ||||
\t|||| |  _ \ ___  __| | __ )  ___   ___ | | __ ||||
\t|||| | |_) / _ \/ _\ |  _ \ / _ \ / _ \| |/ / ||||
\t|||| |  _ <  __/ (_| | |_) | (_) | (_) |   <  ||||
\t|||| |_| \_\___|\__,_|____/ \___/ \___/|_|\_\ ||||
\t||||                     |                    ||||
\t||||                     |                    ||||
\t||||                     |                    ||||
\t||||                     |                    ||||
\t||||                     |          benoit.g  ||||
\t||||                     |           cyril.d  ||||
\t||||____  ______________ | __________________ ||||
\t||/=====================\|/====================\||
\t'----------------------~___~--------------------''
${RESTORE}\n\t\tBonjour et bienvenue dans le ${LRED}RedBook${RESTORE}\n"
echo -e "Le ${LRED}RedBook${RESTORE} à été créé pour un usage éthique dans le cadre de tests d'intrusion"
echo -e "Le ${LRED}Redbook${RESTORE} ne doit en aucun cas être utilisé afin de nuire à toute personne physique ou morale\n\n\n"
}

#START
clear
banner
menu_start
